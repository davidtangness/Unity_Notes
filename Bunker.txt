WHAT IS BUNKER?

---------------

BACKGROUND

Bunker is a game where you play paintball.

Paintball games have been made before, as fairly conventional FPS's, but I feel like they miss the point. Paintball is a game about odds, not twitch skill.

In general, you win an FPS by twitching faster and more accurately than your opponent so that you hit them before they hit you. Guns are accurate, so you know that if your twitch is better then all else WILL be equal and you will win.

In my experience, this isn't how paintball really works. Paintball guns are relatively easy to aim, being quite small and light, but they have relatively poor accuracy. This can be countered by increasing rate-of-fire, but then paintball becomes boring (and most paintball competitions have rules restricting ROF for this exact reason). 

I think paintball is a game of odds, not a game of twitch.

When I pop out of cover, there is a delay while I locate and aim at my opponent and they locate and aim at me. Then there is a chance I will actually hit them, and a chance they will actually hit me. As I shoot and watch where my paintballs land I can zero-in my aim to some extent, improving my chance to hit. My opponent does the same. 

So how do I win? By choosing cover which gives me advantageous angles where I'm more likely to hit my opponent than get hit. And by sneaking between cover while monitoring my opponent's position so that when I pop out to shoot, I already know where to aim wheras they have to spend a moment locating me. These are the systems which I want to create in Bunker.

There are plenty of smaller/situational tactics (suppressive fire, team play, end-runs etc) which I would like to create as well, but my resources are limited so these may be left out.

----------

OVERVIEW

Bunker has a single player character going up against one or several opponents on a paintball field which lots of cover (bunkers). The camera will be above and behind the player, but the field should be obscured when out of the player character's view (RTS-style "fog-of-war").

The player should have some awareness of what is happening outside of their LOS. When the player breaks LOS with all enemies, enemies will focus their aim on the player's last known position. **This system can be expanded quite a bit once I have the basic mechancis functioning.**


The player can shoot at, and be shot by, any opponent which they have line-of-sight to. Shooting is automated, perhaps represented by 3D cones in the game world, so that a character which is more exposed will have a higher chance of being hit. As one character fires continuously at another, their aim improves to some limit. Their aim resets when they stop firing (ie, LOS is broken).

Characters have three active states:

They can be "safe," meaning they are fully behind a piece of cover with no LOS beyond the cover, and opponents beyond cover have no LOS to them. 

They can be "popped," meaning they are leaning around the edge of cover and moderately difficult to hit, (perhaps 40% per second of fire). If a character pops left, they will be able to see everything to their left and directly ahead, plus a few degrees to the right.

Lastly, they can be "exposed," meaning they are entirely out of cover and have complete visibility, while being very easy to hit.

The fourth state is "out". When a character is shot, they leave the game. When all characters on one side of the game are out, the game ends.

Movement is point-to-point, with each piece of cover defining several positions (ie, front left, front right, front center, back left, back right, back center). When a character enters cover they start in the safe in the safe center position, and can lean into the other positions in order to shoot and be shot at.


--------

SETTING UP THE PLAY AREA (GROUND, LIGHTS)

The game should be played on a large flat surface, longest along the z-axis. I'll create a Planeat origin then adjust its Scale transform to make it a bit wider and much longer.

For lighting, I want to emlate the "spotlight" look of real paintball fields. A row of spotlights along each wall, at a low angle with some space between each pool of light for dramatic shadows. For my current field I would want about 12 spotlight lights, six per side, but this causes a problem: Only the first two spotlights actually create clear pools of light, the rest are lighting the entire scene. A bit of research reveals this is is a quality/performance limitation which I can adjust in Unity's Project Settings. The spotlights I want are "pixel lights," and my game is limited to a max of 2 pixel lights currently. The remaining lights become less-intensive "vertext lights," which don't have the look that I want. For now, I'll just increase the Pixel Light limit to 12 to get the look I want, and hopefully in testing the performance will hold up.

However, when I enable shadows for the spotlights, I recieve a warning message: Realtime shadows for point and spot lights require Unity Pro. Well, great, back to directional lights. I create two directional lights, enable shadows, and notice only one has a shadow. A bit of research reveals that I need to change the "Rendering Path" for this project. The current rendering path is "Forward," and only supports realtime shadows for a single directional light. To get around this I need to switch to the more intensive "Deferred Lighting" rendering path... which requires Unity Pro. Great, one directional light it is!












